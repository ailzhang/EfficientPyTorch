import torch

# 创建一个10*20的张量, 使用contiguous()确保其连续性
x = torch.arange(200).reshape(10, 20).contiguous()

# 访问单个元素，返回第0行的第0个元素
x[0, 0]  # tensor(0)

# 支持负数索引，返回第0行的最后一个元素
x[0, -1]  # tensor(19)

# 切片索引，单独一个冒号表示选择该维度的所有元素，返回第2行的整行数据
x[2, :]
# tensor([40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59])

# 切片索引，返回从索引为1的列开始，到索引为9的列（不包含），每隔3个索引选择一个元素，即第0行的第1、4、7列数据
x[0, 1:9:3]  # tensor([[  1,   4,   7])

# 省略号是一个特殊的索引符号，代表"在这个位置选择所有可能的索引"，返回第1列的所有元素
x[..., 1]
# tensor([  1,  21,  41,  61,  81, 101, 121, 141, 161, 181])

# 与 NumPy 类似，None 表示加入一个新的维度，常用于调整张量的形状以满足某些特定操作的需求。
# 这里我们在第二个维度（即行和列之间）插入一个新的维度。
x[:, None, :]  # 返回张量的形状为(10, 1, 20)
